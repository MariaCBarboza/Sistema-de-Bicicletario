# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarCloud analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# Free for open source project.

# 1. Login to SonarCloud.io using your GitHub account

# 2. Import your project on SonarCloud
#     * Add your GitHub organization first, then add your repository as a new project.
#     * Please note that many languages are eligible for automatic analysis,
#       which means that the analysis will start automatically without the need to set up GitHub Actions.
#     * This behavior can be changed in Administration > Analysis Method.
#
# 3. Follow the SonarCloud in-product tutorial
#     * a. Copy/paste the Project Key and the Organization Key into the args parameter below
#          (You'll find this information in SonarCloud. Click on "Information" at the bottom left)
#
#     * b. Generate a new token and add it to your Github repository's secrets using the name SONAR_TOKEN
#          (On SonarCloud, click on your avatar on top-right > My account > Security
#           or go directly to https://sonarcloud.io/account/security/)

# Feel free to take a look at our documentation (https://docs.sonarcloud.io/getting-started/github/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/help/sc/9)

name: SonarCloud analysis

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:
  Analysis:
    runs-on: ubuntu-latest

    steps:
      # 1. PASSO ESSENCIAL: Baixar o código do repositório
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Baixa todo o histórico do Git. Essencial para o SonarCloud
          fetch-depth: 0

      # 2. Configurar o ambiente Java (JDK 17)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven' # Adiciona cache para acelerar builds futuros

      # 3. Compilar e testar o projeto com Maven
      #    Este passo gera os arquivos .class e relatórios de teste
      #    que o SonarScanner precisa para a análise.
      #    REMOVA a parte "sonar:sonar" daqui.
      - name: Build and test with Maven
        # Se o seu pom.xml não estiver na raiz, use 'working-directory'
        # working-directory: ./caminho-do-seu-projeto 
        run: mvn -B verify

      # 4. Executar a análise do SonarCloud
      #    Este passo roda DEPOIS do build e usa a ação oficial.
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          # Token do GitHub é passado automaticamente para a ação
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Use o SONAR_TOKEN configurado nos Secrets do repositório
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          # Passamos as chaves do projeto aqui.
          # A ação do Sonar é inteligente e vai pegar o resto das
          # informações do build anterior do Maven.
          args: >
            -Dsonar.projectKey=github-joaocampbell_equipamento
            -Dsonar.organization=github-joaocampbell
